# docker-compose.yml
version: '3.8'

services:
  # Storage Layer
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Processing Engine
  spark-master:
    image: bitnami/spark:3.3.0
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./src/spark/jobs:/opt/spark/jobs
      - ./src/spark/config:/opt/spark/config

  spark-worker:
    image: bitnami/spark:3.3.0
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    volumes:
      - ./src/spark/jobs:/opt/spark/jobs
    depends_on:
      - spark-master

  # Query Engine
  trino:
    image: trinodb/trino:latest
    ports:
      - "8081:8080"
    volumes:
      - ./src/trino/catalog:/etc/trino/catalog
    depends_on:
      - minio

  # Metadata Store
  postgres:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: datalake
      POSTGRES_PASSWORD: datalake123
      POSTGRES_DB: datalake
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U datalake"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Orchestration
  airflow-webserver:
    image: apache/airflow:2.5.1
    depends_on:
      - postgres
    environment:
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://datalake:datalake123@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./src/airflow/dags:/opt/airflow/dags
      - ./src/airflow/plugins:/opt/airflow/plugins
    ports:
      - "8082:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: apache/airflow:2.5.1
    depends_on:
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://datalake:datalake123@postgres/airflow
    volumes:
      - ./src/airflow/dags:/opt/airflow/dags
      - ./src/airflow/plugins:/opt/airflow/plugins
    command: scheduler

  existing_service:
    image: existing_image
    ports:
      - "8080:8080"
    networks:
      - kenyir_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - kenyir_network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.0
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5000:5000"
    networks:
      - kenyir_network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    ports:
      - "5601:5601"
    networks:
      - kenyir_network

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - kenyir_network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    networks:
      - kenyir_network

networks:
  kenyir_network:
    driver: bridge

volumes:
  minio_data:
  postgres_data: